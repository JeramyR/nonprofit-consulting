/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';

// Create Virtual Routes

const PrivacyLazyImport = createFileRoute('/privacy')();
const ContactLazyImport = createFileRoute('/contact')();
const AboutLazyImport = createFileRoute('/about')();
const IndexLazyImport = createFileRoute('/')();

// Create/Update Routes

const PrivacyLazyRoute = PrivacyLazyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/privacy.lazy').then(d => d.Route));

const ContactLazyRoute = ContactLazyImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then(d => d.Route));

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then(d => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then(d => d.Route));

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/contact': {
      id: '/contact';
      path: '/contact';
      fullPath: '/contact';
      preLoaderRoute: typeof ContactLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/privacy': {
      id: '/privacy';
      path: '/privacy';
      fullPath: '/privacy';
      preLoaderRoute: typeof PrivacyLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute;
  '/about': typeof AboutLazyRoute;
  '/contact': typeof ContactLazyRoute;
  '/privacy': typeof PrivacyLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute;
  '/about': typeof AboutLazyRoute;
  '/contact': typeof ContactLazyRoute;
  '/privacy': typeof PrivacyLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexLazyRoute;
  '/about': typeof AboutLazyRoute;
  '/contact': typeof ContactLazyRoute;
  '/privacy': typeof PrivacyLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/about' | '/contact' | '/privacy';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/about' | '/contact' | '/privacy';
  id: '__root__' | '/' | '/about' | '/contact' | '/privacy';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  AboutLazyRoute: typeof AboutLazyRoute;
  ContactLazyRoute: typeof ContactLazyRoute;
  PrivacyLazyRoute: typeof PrivacyLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  PrivacyLazyRoute: PrivacyLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/about",
        "/contact",
        "/privacy"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/about": {
      "filePath": "about.lazy.jsx"
    },
    "/contact": {
      "filePath": "contact.lazy.jsx"
    },
    "/privacy": {
      "filePath": "privacy.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
